{"version":3,"sources":["components/twitch/GameCard.tsx","components/twitch/TwitchGames.tsx","components/twitch/TwitchHeader/SearchInput.tsx","components/twitch/TwitchHeader/SearchResults.tsx","components/twitch/TwitchHeader/index.tsx","components/indicators/TwitchCardIndicator.tsx","containers/twitch/Twitch.tsx"],"names":["useStyles","makeStyles","theme","createStyles","gameCardRoot","gameCardDetails","marginTop","spacing","display","justifyContent","margin","marginLeft","GameCard","topGame","classes","useState","raised","setRaised","handleRaise","encodedGameName","encodeURIComponent","game","name","trim","className","to","Card","onMouseEnter","onMouseLeave","CardActionArea","CardMedia","component","alt","image","box","large","title","Typography","variant","Box","color","fontSize","channels","viewers","gamesRoot","loader","textAlign","TwitchGames","topGames","isFetchingMore","Grid","container","top","map","key","_id","item","xs","sm","md","lg","xl","CircularProgress","searchInput","borderColor","SearchInput","onInputChange","textfieldRef","loading","TextField","ref","autoComplete","placeholder","InputProps","startAdornment","InputAdornment","position","endAdornment","size","onChange","verifiedIcon","SearchResults","anchorEl","handleClose","open","Boolean","id","undefined","ClickAwayListener","onClickAway","Popper","transition","Paper","elevation","List","aria-label","channel","ListItem","button","RouterLink","ListItemAvatar","Avatar","src","logo","ListItemText","primary","ListItemSecondaryAction","partner","twitchHeaderRoot","fontFamily","fontWeight","TwitchHeader","useRef","setChannels","term","setTerm","setLoading","setAnchorEl","useEffect","fetchData","a","API","get","params","data","timeout","setTimeout","clearTimeout","length","current","m","event","target","value","Divider","TwitchCardIndicator","items","Array","fill","_","i","index","Skeleton","height","animation","pt","width","twitchRoot","flexDirection","overflow","errorAlert","Twitch","useScrollBottom","isBottom","scrollRef","offset","setOffset","dispatch","useDispatch","useSelector","state","twitch","shallowEqual","isFetching","error","fetchTopGames","fetchMoreGames","_total","Alert","severity"],"mappings":"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","file":"static/js/13.f2caddb2.chunk.js","sourcesContent":["import React, { useState, FC } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { Games } from '../../store/twitch/types'\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\nimport { Card, CardMedia, CardActionArea, Box, Typography, Theme } from '@material-ui/core'\r\nimport VisibilityOutlinedIcon from '@material-ui/icons/VisibilityOutlined'\r\nimport LiveTvIcon from '@material-ui/icons/LiveTv'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    gameCardRoot: {},\r\n    gameCardDetails: {\r\n      marginTop: theme.spacing(1),\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n    },\r\n    margin: {\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n  }),\r\n)\r\n\r\ninterface GameCardProps {\r\n  topGame: Games\r\n}\r\n\r\nconst GameCard: FC<GameCardProps> = ({ topGame }) => {\r\n  const classes = useStyles()\r\n  const [raised, setRaised] = useState(false)\r\n\r\n  const handleRaise = () => {\r\n    setRaised(raised => !raised)\r\n  }\r\n\r\n  const encodedGameName = encodeURIComponent(topGame.game.name.trim())\r\n\r\n  return (\r\n    <div className={classes.gameCardRoot}>\r\n      <Link to={`/twitch/streams/game/${encodedGameName}`}>\r\n        <Card raised={raised} onMouseEnter={handleRaise} onMouseLeave={handleRaise}>\r\n          <CardActionArea>\r\n            <CardMedia\r\n              component=\"img\"\r\n              alt={topGame.game.name}\r\n              image={topGame.game.box.large}\r\n              title={topGame.game.name}\r\n            />\r\n          </CardActionArea>\r\n        </Card>\r\n      </Link>\r\n      <div className={classes.gameCardDetails}>\r\n        <Typography variant=\"body2\">{topGame.game.name}</Typography>\r\n        <div>\r\n          <Box display=\"flex\" title=\"Live Streamers\">\r\n            <LiveTvIcon color=\"action\" fontSize=\"small\" />\r\n            <Typography variant=\"body2\" className={classes.margin}>\r\n              {topGame.channels}\r\n            </Typography>\r\n          </Box>\r\n          <Box display=\"flex\" title=\"Viewers\">\r\n            <VisibilityOutlinedIcon color=\"action\" fontSize=\"small\" />\r\n            <Typography variant=\"body2\" className={classes.margin}>\r\n              {topGame.viewers}\r\n            </Typography>\r\n          </Box>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameCard\r\n","import React, { FC } from 'react'\r\nimport { TopGames } from '../../store/twitch/types'\r\n\r\nimport GameCard from './GameCard'\r\n\r\nimport { Grid, Box, makeStyles, createStyles, Theme, CircularProgress, Fade } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    gamesRoot: {\r\n      margin: theme.spacing(2),\r\n    },\r\n    loader: {\r\n      textAlign: 'center',\r\n    },\r\n  }),\r\n)\r\n\r\ninterface StateProps {\r\n  topGames: TopGames\r\n  isFetchingMore: boolean\r\n}\r\n\r\nconst TwitchGames: FC<StateProps> = ({ topGames, isFetchingMore }) => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div className={classes.gamesRoot}>\r\n      <Grid container spacing={4}>\r\n        {topGames.top.map(topGame => (\r\n          <Grid key={topGame.game._id} item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n            <GameCard topGame={topGame} />\r\n          </Grid>\r\n        ))}\r\n        {isFetchingMore && (\r\n          <Grid item xs={12}>\r\n            <Box className={classes.loader}>\r\n              <CircularProgress />\r\n            </Box>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TwitchGames\r\n","import React, { FC } from 'react'\r\n\r\nimport { makeStyles, createStyles, TextField, InputAdornment, CircularProgress } from '@material-ui/core'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    searchInput: {\r\n      '& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline': {\r\n        borderColor: '#9146FF',\r\n      },\r\n      '& .MuiOutlinedInput-root.Mui-error .MuiOutlinedInput-notchedOutline': {\r\n        borderColor: 'red',\r\n      },\r\n    },\r\n  }),\r\n)\r\n\r\ninterface SearchInputProps {\r\n  onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n  textfieldRef: React.MutableRefObject<null>\r\n  loading: boolean\r\n}\r\n\r\nconst SearchInput: FC<SearchInputProps> = ({ onInputChange, textfieldRef, loading }) => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <TextField\r\n      name=\"term\"\r\n      ref={textfieldRef}\r\n      autoComplete=\"off\"\r\n      variant=\"outlined\"\r\n      className={classes.searchInput}\r\n      placeholder=\"Search users\"\r\n      InputProps={{\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\">\r\n            <SearchIcon />\r\n          </InputAdornment>\r\n        ),\r\n        endAdornment: (\r\n          <InputAdornment position=\"end\">{loading && <CircularProgress size={24} color=\"inherit\" />}</InputAdornment>\r\n        ),\r\n      }}\r\n      onChange={onInputChange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React, { FC } from 'react'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport { Channel } from '../../../store/twitch/types'\r\n\r\nimport {\r\n  makeStyles,\r\n  createStyles,\r\n  Theme,\r\n  Popper,\r\n  List,\r\n  ListItem,\r\n  Avatar,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  ClickAwayListener,\r\n  Paper,\r\n} from '@material-ui/core'\r\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    verifiedIcon: {\r\n      marginLeft: theme.spacing(1),\r\n      color: '#9146FF',\r\n    },\r\n  }),\r\n)\r\n\r\ninterface SearchResultsProps {\r\n  anchorEl: null | undefined\r\n  handleClose: () => void\r\n  channels: Channel[]\r\n}\r\n\r\nconst SearchResults: FC<SearchResultsProps> = ({ anchorEl, handleClose, channels }) => {\r\n  const classes = useStyles()\r\n\r\n  const open = Boolean(anchorEl)\r\n  const id = open ? 'channel-popper' : undefined\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={handleClose}>\r\n      <Popper id={id} open={open} anchorEl={anchorEl} transition>\r\n        <Paper elevation={4}>\r\n          <List aria-label=\"channel\">\r\n            {channels.map(channel => {\r\n              return (\r\n                <ListItem key={channel._id} button component={RouterLink} to={`/twitch/${channel.name}`}>\r\n                  <ListItemAvatar>\r\n                    <Avatar src={channel.logo} alt={channel.name} />\r\n                  </ListItemAvatar>\r\n                  <ListItemText primary={channel.name} />\r\n                  <ListItemSecondaryAction>\r\n                    {channel.partner && <VerifiedUserIcon className={classes.verifiedIcon} fontSize=\"small\" />}\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n              )\r\n            })}\r\n          </List>\r\n        </Paper>\r\n      </Popper>\r\n    </ClickAwayListener>\r\n  )\r\n}\r\n\r\nexport default SearchResults\r\n","import React, { useEffect, useRef, useState } from 'react'\r\n\r\nimport { Channel } from '../../../store/twitch/types'\r\n\r\nimport { makeStyles, createStyles, Box, Typography, Divider, Theme } from '@material-ui/core'\r\nimport { API } from '../../../apis/api'\r\nimport SearchInput from './SearchInput'\r\nimport SearchResults from './SearchResults'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    twitchHeaderRoot: {},\r\n    title: {\r\n      fontFamily: `\"Roboto\", \"Helvetica\", \"Arial\", sans-serif`,\r\n      fontWeight: 700,\r\n      color: '#9146FF',\r\n      margin: theme.spacing(1, 0),\r\n    },\r\n  }),\r\n)\r\n\r\ninterface Channels {\r\n  channels: Channel[]\r\n  _total: number\r\n}\r\n\r\nconst TwitchHeader = () => {\r\n  const classes = useStyles()\r\n  const textfieldRef = useRef(null)\r\n  const [channels, setChannels] = useState<Channel[]>([])\r\n  const [term, setTerm] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n  const [anchorEl, setAnchorEl] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const { data } = await API.get<Channels>(`/api/twitch/search/channels`, { params: { term } })\r\n        setLoading(false)\r\n        setChannels(data.channels)\r\n      } catch (error) {\r\n        setLoading(false)\r\n        setChannels([])\r\n      }\r\n    }\r\n    const timeout = setTimeout(() => {\r\n      if (term) fetchData()\r\n    }, 1000)\r\n    return () => clearTimeout(timeout)\r\n  }, [term])\r\n\r\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTerm(event.target.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (channels.length > 0) setAnchorEl(textfieldRef.current)\r\n  }, [channels])\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.twitchHeaderRoot}>\r\n      <Box m={2} display=\"flex\" justifyContent=\"space-between\">\r\n        <Typography variant=\"h4\" className={classes.title}>\r\n          Twitch Top Games\r\n        </Typography>\r\n        <SearchInput onInputChange={onInputChange} textfieldRef={textfieldRef} loading={loading} />\r\n        <SearchResults anchorEl={anchorEl} handleClose={handleClose} channels={channels} />\r\n      </Box>\r\n      <Divider />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TwitchHeader\r\n","import React, { FC } from 'react'\r\nimport { Skeleton } from '@material-ui/lab'\r\nimport { Box, Grid } from '@material-ui/core'\r\n\r\ntype StateProps = {\r\n  size: number\r\n}\r\n\r\nconst TwitchCardIndicator: FC<StateProps> = ({ size }) => {\r\n  const items = Array(size)\r\n    .fill(null)\r\n    .map((_, i) => i)\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {items.map((item, index) => (\r\n        <Grid key={index} item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n          <Skeleton variant=\"rect\" height={411} animation=\"wave\" />\r\n          <Box pt={1} display=\"flex\" justifyContent=\"space-between\">\r\n            <Skeleton variant=\"text\" width={120} height={24} animation=\"wave\" />\r\n            <Box>\r\n              <Skeleton variant=\"text\" width={70} animation=\"wave\" />\r\n              <Skeleton variant=\"text\" width={70} animation=\"wave\" />\r\n            </Box>\r\n          </Box>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  )\r\n}\r\nexport default TwitchCardIndicator\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux'\r\nimport { fetchTopGames, fetchMoreGames } from '../../store/twitch/actions'\r\nimport { RootState } from '../../store'\r\nimport { Stream, TopGames } from '../../store/twitch/types'\r\n\r\nimport TwitchGames from '../../components/twitch/TwitchGames'\r\nimport TwitchHeader from '../../components/twitch/TwitchHeader/index'\r\nimport TwitchCardIndicator from '../../components/indicators/TwitchCardIndicator'\r\n\r\nimport { makeStyles, createStyles, Box, Theme } from '@material-ui/core'\r\nimport { Alert } from '@material-ui/lab'\r\nimport useScrollBottom from '../../hooks/useScrollBottom'\r\n\r\n// const JAHREIN = '6768122'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    twitchRoot: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      height: '100%',\r\n      overflow: 'hidden auto',\r\n    },\r\n    errorAlert: {\r\n      margin: theme.spacing(2),\r\n    },\r\n    title: {\r\n      fontFamily: `\"Roboto\", \"Helvetica\", \"Arial\", sans-serif`,\r\n      fontWeight: 700,\r\n      color: '#9146FF',\r\n      margin: theme.spacing(1, 0),\r\n    },\r\n  }),\r\n)\r\n\r\ninterface StateProps {\r\n  isFetching: boolean\r\n  isFetchingMore: boolean\r\n  stream: Stream\r\n  topGames: TopGames\r\n  error?: string\r\n}\r\n\r\nconst Twitch = () => {\r\n  const classes = useStyles()\r\n  const [isBottom, scrollRef] = useScrollBottom()\r\n  const [offset, setOffset] = useState(0)\r\n  const dispatch = useDispatch()\r\n  const { isFetching, isFetchingMore, topGames, error } = useSelector<RootState, StateProps>(\r\n    state => state.twitch,\r\n    shallowEqual,\r\n  )\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTopGames())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    if (isBottom) setOffset(offset + 10)\r\n  }, [isBottom, setOffset])\r\n\r\n  useEffect(() => {\r\n    if (offset) dispatch(fetchMoreGames(offset))\r\n  }, [offset, dispatch])\r\n\r\n  return (\r\n    <div className={classes.twitchRoot} ref={scrollRef}>\r\n      <TwitchHeader />\r\n      {isFetching ? (\r\n        <Box m={2}>\r\n          <TwitchCardIndicator size={10} />\r\n        </Box>\r\n      ) : !error && topGames._total > 0 ? (\r\n        <TwitchGames topGames={topGames} isFetchingMore={isFetchingMore} />\r\n      ) : (\r\n        error && (\r\n          <Alert severity=\"error\" className={classes.errorAlert}>\r\n            {error}\r\n          </Alert>\r\n        )\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Twitch\r\n"],"sourceRoot":""}