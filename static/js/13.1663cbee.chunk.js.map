{"version":3,"sources":["components/twitch/GameCard.tsx","components/twitch/TwitchGames.tsx","components/twitch/TwitchHeader/SearchInput.tsx","components/twitch/TwitchHeader/SearchResults.tsx","components/twitch/TwitchHeader/index.tsx","components/indicators/TwitchCardIndicator.tsx","containers/twitch/Twitch.tsx"],"names":["useStyles","makeStyles","theme","createStyles","gameCardRoot","gameCardDetails","marginTop","spacing","display","justifyContent","margin","marginLeft","GameCard","topGame","classes","useState","raised","setRaised","handleRaise","encodedGameName","encodeURIComponent","game","name","trim","className","to","Card","onMouseEnter","onMouseLeave","CardActionArea","CardMedia","component","alt","image","box","large","title","Typography","variant","Box","color","fontSize","channels","viewers","gamesRoot","loader","textAlign","TwitchGames","topGames","isFetchingMore","Grid","container","top","map","key","_id","item","xs","sm","md","lg","xl","CircularProgress","searchInput","borderColor","SearchInput","value","onInputChange","textfieldRef","isSearching","TextField","ref","autoComplete","placeholder","InputProps","startAdornment","InputAdornment","position","endAdornment","size","onChange","verifiedIcon","SearchResults","anchorEl","handleClose","open","Boolean","id","undefined","ClickAwayListener","onClickAway","Popper","transition","Paper","elevation","List","aria-label","channel","ListItem","button","RouterLink","ListItemAvatar","Avatar","src","logo","ListItemText","primary","ListItemSecondaryAction","partner","twitchHeaderRoot","fontFamily","fontWeight","TwitchHeader","useRef","dispatch","useDispatch","useSelector","state","twitch","searchResult","term","setTerm","setAnchorEl","debouncedSearchTerm","useDebounce","useEffect","searchChannels","length","current","m","event","target","Divider","TwitchCardIndicator","items","Array","fill","_","i","index","Skeleton","height","animation","pt","width","twitchRoot","flexDirection","overflow","errorAlert","Twitch","useScrollBottom","isBottom","scrollRef","offset","setOffset","shallowEqual","isFetching","error","fetchTopGames","fetchMoreGames","_total","Alert","severity"],"mappings":"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","file":"static/js/13.1663cbee.chunk.js","sourcesContent":["import React, { useState, FC } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { Game } from '../../store/twitch/types'\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\nimport { Card, CardMedia, CardActionArea, Box, Typography, Theme } from '@material-ui/core'\r\nimport VisibilityOutlinedIcon from '@material-ui/icons/VisibilityOutlined'\r\nimport LiveTvIcon from '@material-ui/icons/LiveTv'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    gameCardRoot: {},\r\n    gameCardDetails: {\r\n      marginTop: theme.spacing(1),\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n    },\r\n    margin: {\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n  }),\r\n)\r\n\r\ninterface GameCardProps {\r\n  topGame: Game\r\n}\r\n\r\nconst GameCard: FC<GameCardProps> = ({ topGame }) => {\r\n  const classes = useStyles()\r\n  const [raised, setRaised] = useState(false)\r\n\r\n  const handleRaise = () => {\r\n    setRaised(raised => !raised)\r\n  }\r\n\r\n  const encodedGameName = encodeURIComponent(topGame.game.name.trim())\r\n\r\n  return (\r\n    <div className={classes.gameCardRoot}>\r\n      <Link to={`/twitch/streams/game/${encodedGameName}`}>\r\n        <Card raised={raised} onMouseEnter={handleRaise} onMouseLeave={handleRaise}>\r\n          <CardActionArea>\r\n            <CardMedia\r\n              component=\"img\"\r\n              alt={topGame.game.name}\r\n              image={topGame.game.box.large}\r\n              title={topGame.game.name}\r\n            />\r\n          </CardActionArea>\r\n        </Card>\r\n      </Link>\r\n      <div className={classes.gameCardDetails}>\r\n        <Typography variant=\"body2\">{topGame.game.name}</Typography>\r\n        <div>\r\n          <Box display=\"flex\" title=\"Live Streamers\">\r\n            <LiveTvIcon color=\"action\" fontSize=\"small\" />\r\n            <Typography variant=\"body2\" className={classes.margin}>\r\n              {topGame.channels}\r\n            </Typography>\r\n          </Box>\r\n          <Box display=\"flex\" title=\"Viewers\">\r\n            <VisibilityOutlinedIcon color=\"action\" fontSize=\"small\" />\r\n            <Typography variant=\"body2\" className={classes.margin}>\r\n              {topGame.viewers}\r\n            </Typography>\r\n          </Box>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameCard\r\n","import React, { FC } from 'react'\r\nimport { TopGames } from '../../store/twitch/types'\r\n\r\nimport GameCard from './GameCard'\r\n\r\nimport { Grid, Box, makeStyles, createStyles, Theme, CircularProgress, Fade } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    gamesRoot: {\r\n      margin: theme.spacing(2),\r\n    },\r\n    loader: {\r\n      textAlign: 'center',\r\n    },\r\n  }),\r\n)\r\n\r\ninterface StateProps {\r\n  topGames: TopGames\r\n  isFetchingMore: boolean\r\n}\r\n\r\nconst TwitchGames: FC<StateProps> = ({ topGames, isFetchingMore }) => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div className={classes.gamesRoot}>\r\n      <Grid container spacing={4}>\r\n        {topGames.top.map(topGame => (\r\n          <Grid key={topGame.game._id} item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n            <GameCard topGame={topGame} />\r\n          </Grid>\r\n        ))}\r\n        {isFetchingMore && (\r\n          <Grid item xs={12}>\r\n            <Box className={classes.loader}>\r\n              <CircularProgress />\r\n            </Box>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TwitchGames\r\n","import React, { FC } from 'react'\r\n\r\nimport { makeStyles, createStyles, TextField, InputAdornment, CircularProgress } from '@material-ui/core'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    searchInput: {\r\n      '& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline': {\r\n        borderColor: '#9146FF',\r\n      },\r\n      '& .MuiOutlinedInput-root.Mui-error .MuiOutlinedInput-notchedOutline': {\r\n        borderColor: 'red',\r\n      },\r\n    },\r\n  }),\r\n)\r\n\r\ninterface SearchInputProps {\r\n  value: string\r\n  onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n  textfieldRef: React.MutableRefObject<null>\r\n  isSearching: boolean\r\n}\r\n\r\nconst SearchInput: FC<SearchInputProps> = ({ value, onInputChange, textfieldRef, isSearching }) => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <TextField\r\n      ref={textfieldRef}\r\n      autoComplete=\"off\"\r\n      value={value}\r\n      variant=\"outlined\"\r\n      className={classes.searchInput}\r\n      placeholder=\"Search users\"\r\n      InputProps={{\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\">\r\n            <SearchIcon />\r\n          </InputAdornment>\r\n        ),\r\n        endAdornment: (\r\n          <InputAdornment position=\"end\">\r\n            {isSearching && <CircularProgress size={24} color=\"inherit\" />}\r\n          </InputAdornment>\r\n        ),\r\n      }}\r\n      onChange={onInputChange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React, { FC } from 'react'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport { Channel } from '../../../store/twitch/types'\r\n\r\nimport {\r\n  makeStyles,\r\n  createStyles,\r\n  Theme,\r\n  Popper,\r\n  List,\r\n  ListItem,\r\n  Avatar,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  ClickAwayListener,\r\n  Paper,\r\n} from '@material-ui/core'\r\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    verifiedIcon: {\r\n      marginLeft: theme.spacing(1),\r\n      color: '#9146FF',\r\n    },\r\n  }),\r\n)\r\n\r\ninterface SearchResultsProps {\r\n  anchorEl: null | undefined\r\n  handleClose: () => void\r\n  channels: Channel[]\r\n}\r\n\r\nconst SearchResults: FC<SearchResultsProps> = ({ anchorEl, handleClose, channels }) => {\r\n  const classes = useStyles()\r\n\r\n  const open = Boolean(anchorEl)\r\n  const id = open ? 'channel-popper' : undefined\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={handleClose}>\r\n      <Popper id={id} open={open} anchorEl={anchorEl} transition>\r\n        <Paper elevation={4}>\r\n          <List aria-label=\"channel\">\r\n            {channels.map(channel => {\r\n              return (\r\n                <ListItem key={channel._id} button component={RouterLink} to={`/twitch/${channel.name}`}>\r\n                  <ListItemAvatar>\r\n                    <Avatar src={channel.logo} alt={channel.name} />\r\n                  </ListItemAvatar>\r\n                  <ListItemText primary={channel.name} />\r\n                  <ListItemSecondaryAction>\r\n                    {channel.partner && <VerifiedUserIcon className={classes.verifiedIcon} fontSize=\"small\" />}\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n              )\r\n            })}\r\n          </List>\r\n        </Paper>\r\n      </Popper>\r\n    </ClickAwayListener>\r\n  )\r\n}\r\n\r\nexport default SearchResults\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { RootState } from '../../../store'\r\nimport { searchChannels } from '../../../store/twitch/actions'\r\nimport { SearchResult } from '../../../store/twitch/types'\r\nimport useDebounce from '../../../hooks/useDebounce'\r\n\r\nimport SearchInput from './SearchInput'\r\nimport SearchResults from './SearchResults'\r\n\r\nimport { makeStyles, createStyles, Box, Typography, Divider, Theme } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    twitchHeaderRoot: {},\r\n    title: {\r\n      fontFamily: `\"Roboto\", \"Helvetica\", \"Arial\", sans-serif`,\r\n      fontWeight: 700,\r\n      color: '#9146FF',\r\n      margin: theme.spacing(1, 0),\r\n    },\r\n  }),\r\n)\r\n\r\ninterface StateProps {\r\n  isSearching: boolean\r\n  searchResult: SearchResult\r\n}\r\n\r\nconst TwitchHeader = () => {\r\n  const classes = useStyles()\r\n  const textfieldRef = useRef(null)\r\n  const dispatch = useDispatch()\r\n  const { isSearching, searchResult } = useSelector<RootState, StateProps>(state => state.twitch)\r\n  const [term, setTerm] = useState('')\r\n  const [anchorEl, setAnchorEl] = useState(null)\r\n\r\n  const debouncedSearchTerm = useDebounce(term, 1000)\r\n\r\n  useEffect(() => {\r\n    if (debouncedSearchTerm) dispatch(searchChannels(debouncedSearchTerm))\r\n  }, [debouncedSearchTerm])\r\n\r\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTerm(event.target.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (searchResult.channels.length > 0) setAnchorEl(textfieldRef.current)\r\n  }, [searchResult])\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null)\r\n    setTerm('')\r\n  }\r\n\r\n  return (\r\n    <div className={classes.twitchHeaderRoot}>\r\n      <Box m={2} display=\"flex\" justifyContent=\"space-between\">\r\n        <Typography variant=\"h4\" className={classes.title}>\r\n          Twitch Top Games\r\n        </Typography>\r\n        <SearchInput onInputChange={onInputChange} textfieldRef={textfieldRef} isSearching={isSearching} value={term} />\r\n        <SearchResults anchorEl={anchorEl} handleClose={handleClose} channels={searchResult.channels} />\r\n      </Box>\r\n      <Divider />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TwitchHeader\r\n","import React, { FC } from 'react'\r\nimport { Skeleton } from '@material-ui/lab'\r\nimport { Box, Grid } from '@material-ui/core'\r\n\r\ntype StateProps = {\r\n  size: number\r\n}\r\n\r\nconst TwitchCardIndicator: FC<StateProps> = ({ size }) => {\r\n  const items = Array(size)\r\n    .fill(null)\r\n    .map((_, i) => i)\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {items.map((item, index) => (\r\n        <Grid key={index} item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n          <Skeleton variant=\"rect\" height={411} animation=\"wave\" />\r\n          <Box pt={1} display=\"flex\" justifyContent=\"space-between\">\r\n            <Skeleton variant=\"text\" width={120} height={24} animation=\"wave\" />\r\n            <Box>\r\n              <Skeleton variant=\"text\" width={70} animation=\"wave\" />\r\n              <Skeleton variant=\"text\" width={70} animation=\"wave\" />\r\n            </Box>\r\n          </Box>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  )\r\n}\r\nexport default TwitchCardIndicator\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux'\r\nimport { fetchTopGames, fetchMoreGames } from '../../store/twitch/actions'\r\nimport { RootState } from '../../store'\r\nimport { TopGames } from '../../store/twitch/types'\r\n\r\nimport TwitchGames from '../../components/twitch/TwitchGames'\r\nimport TwitchHeader from '../../components/twitch/TwitchHeader/index'\r\nimport TwitchCardIndicator from '../../components/indicators/TwitchCardIndicator'\r\n\r\nimport { makeStyles, createStyles, Box, Theme } from '@material-ui/core'\r\nimport { Alert } from '@material-ui/lab'\r\nimport useScrollBottom from '../../hooks/useScrollBottom'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    twitchRoot: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      height: '100%',\r\n      overflow: 'hidden auto',\r\n    },\r\n    errorAlert: {\r\n      margin: theme.spacing(2),\r\n    },\r\n    title: {\r\n      fontFamily: `\"Roboto\", \"Helvetica\", \"Arial\", sans-serif`,\r\n      fontWeight: 700,\r\n      color: '#9146FF',\r\n      margin: theme.spacing(1, 0),\r\n    },\r\n  }),\r\n)\r\n\r\ninterface StateProps {\r\n  isFetching: boolean\r\n  isFetchingMore: boolean\r\n  topGames: TopGames\r\n  error?: string\r\n}\r\n\r\nconst Twitch = () => {\r\n  const classes = useStyles()\r\n  const [isBottom, scrollRef] = useScrollBottom()\r\n  const [offset, setOffset] = useState(0)\r\n  const dispatch = useDispatch()\r\n  const { isFetching, isFetchingMore, topGames, error } = useSelector<RootState, StateProps>(\r\n    state => state.twitch,\r\n    shallowEqual,\r\n  )\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTopGames())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    if (isBottom) setOffset(offset + 10)\r\n  }, [isBottom, setOffset])\r\n\r\n  useEffect(() => {\r\n    if (offset) dispatch(fetchMoreGames(offset))\r\n  }, [offset, dispatch])\r\n\r\n  return (\r\n    <div className={classes.twitchRoot} ref={scrollRef}>\r\n      <TwitchHeader />\r\n      {isFetching ? (\r\n        <Box m={2}>\r\n          <TwitchCardIndicator size={10} />\r\n        </Box>\r\n      ) : !error && topGames._total > 0 ? (\r\n        <TwitchGames topGames={topGames} isFetchingMore={isFetchingMore} />\r\n      ) : (\r\n        error && (\r\n          <Alert severity=\"error\" className={classes.errorAlert}>\r\n            {error}\r\n          </Alert>\r\n        )\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Twitch\r\n"],"sourceRoot":""}