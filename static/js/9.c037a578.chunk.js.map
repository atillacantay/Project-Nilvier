{"version":3,"sources":["apis/movie.ts","store/movie/actions.ts","components/movie/MovieCard.tsx","containers/movie/Movies.tsx"],"names":["OmdbAPI","Axios","create","baseURL","timeout","fetchMovies","term","page","dispatch","a","type","FETCH_MOVIES_REQUEST","payload","get","response","FETCH_MOVIES_SUCCESS","result","data","FETCH_MOVIES_FAILURE","fetchMovieDetails","imdbId","FETCH_MOVIE_DETAILS_REQUEST","FETCH_MOVIE_DETAILS_SUCCESS","FETCH_MOVIE_DETAILS_FAILURE","useStyles","makeStyles","theme","createStyles","movieCardRoot","media","height","movieCardDetails","marginTop","spacing","display","justifyContent","margin","marginLeft","MovieCard","movie","classes","useState","raised","setRaised","handleRaise","className","to","imdbID","Card","onMouseEnter","onMouseLeave","CardActionArea","CardMedia","component","alt","Title","image","Poster","title","Typography","variant","Type","Year","movieRoot","Movies","useDispatch","useSelector","state","shallowEqual","isFetching","error","useForm","defaultValues","register","handleSubmit","errors","setPage","useEffect","onSubmit","Grid","container","item","xs","autoComplete","TextField","name","placeholder","fullWidth","InputProps","endAdornment","InputAdornment","position","CircularProgress","color","size","inputRef","required","value","message","helperText","Search","length","Pagination","count","Math","round","parseInt","totalResults","onChange","event","map","key","random","toString","substring","sm","md","lg","Alert","severity"],"mappings":"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","file":"static/js/9.c037a578.chunk.js","sourcesContent":["import Axios from 'axios'\r\n\r\nexport const OmdbAPI = Axios.create({\r\n  baseURL: 'https://www.omdbapi.com/',\r\n  timeout: 5000,\r\n})\r\n","// src/store/giphy/actions.ts\r\n\r\nimport { ActionCreator } from 'redux'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport {\r\n  FETCH_MOVIES_REQUEST,\r\n  FETCH_MOVIES_SUCCESS,\r\n  FETCH_MOVIES_FAILURE,\r\n  MoviesActionTypes,\r\n  FETCH_MOVIE_DETAILS_REQUEST,\r\n  FETCH_MOVIE_DETAILS_SUCCESS,\r\n  FETCH_MOVIE_DETAILS_FAILURE,\r\n} from './types'\r\nimport { RootState } from '..'\r\nimport { OmdbAPI } from '../../apis/movie'\r\n\r\nexport type AppThunk = ActionCreator<ThunkAction<void, RootState, null, MoviesActionTypes>>\r\n\r\nexport const fetchMovies: AppThunk = (term: string, page: number) => async dispatch => {\r\n  dispatch({ type: FETCH_MOVIES_REQUEST, payload: {} })\r\n  try {\r\n    const response = await OmdbAPI.get(`/?s=${term}&page=${page}&apikey=1d359387&`)\r\n    dispatch({ type: FETCH_MOVIES_SUCCESS, payload: { result: response.data, term } })\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_MOVIES_FAILURE, payload: {} })\r\n  }\r\n}\r\n\r\nexport const fetchMovieDetails: AppThunk = (imdbId: string) => async dispatch => {\r\n  dispatch({ type: FETCH_MOVIE_DETAILS_REQUEST, payload: {} })\r\n  try {\r\n    const response = await OmdbAPI.get(`/?i=${imdbId}&apikey=1d359387&`)\r\n    dispatch({ type: FETCH_MOVIE_DETAILS_SUCCESS, payload: response.data })\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_MOVIE_DETAILS_FAILURE, payload: {} })\r\n  }\r\n}\r\n","import React, { useState, FC } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Movie } from '../../store/movie/types'\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\nimport { Card, CardMedia, CardActionArea, Typography, Theme } from '@material-ui/core'\r\n\r\n//JSS part\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    movieCardRoot: {},\r\n    media: {\r\n      height: 300,\r\n    },\r\n    movieCardDetails: {\r\n      marginTop: theme.spacing(1),\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n    },\r\n    margin: {\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n  }),\r\n)\r\n\r\ninterface MovieCardProps {\r\n  movie: Movie\r\n}\r\n\r\nconst MovieCard: FC<MovieCardProps> = ({ movie }) => {\r\n  const classes = useStyles()\r\n  const [raised, setRaised] = useState(false)\r\n\r\n  //Changes card's box-shadow attribute\r\n  const handleRaise = () => {\r\n    setRaised(raised => !raised)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.movieCardRoot}>\r\n      <Link to={`/movies/${movie.imdbID}`}>\r\n        <Card raised={raised} onMouseEnter={handleRaise} onMouseLeave={handleRaise}>\r\n          <CardActionArea>\r\n            <CardMedia\r\n              component=\"img\"\r\n              className={classes.media}\r\n              alt={movie.Title}\r\n              //Using ternary operator to avoid unnecessary \"null\" image fetching\r\n              image={movie.Poster !== 'N/A' ? movie.Poster : ''}\r\n              title={movie.Title}\r\n            />\r\n          </CardActionArea>\r\n        </Card>\r\n      </Link>\r\n      <div className={classes.movieCardDetails}>\r\n        <Typography variant=\"body2\">{movie.Title}</Typography>\r\n        <div>\r\n          <Typography variant=\"body2\" className={classes.margin}>\r\n            {movie.Type}\r\n          </Typography>\r\n          <Typography variant=\"body2\" className={classes.margin}>\r\n            {movie.Year}\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MovieCard\r\n","import React, { useEffect, FC, useState } from 'react'\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux'\r\nimport { fetchMovies } from '../../store/movie/actions'\r\nimport { RootState } from '../../store'\r\nimport { Result } from '../../store/movie/types'\r\n\r\nimport MovieCard from '../../components/movie/MovieCard'\r\n\r\nimport { Grid, makeStyles, Theme, createStyles, CircularProgress, TextField, InputAdornment } from '@material-ui/core'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Pagination, Alert } from '@material-ui/lab'\r\n\r\n//JSS part\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    movieRoot: {\r\n      display: 'flex',\r\n      margin: theme.spacing(2),\r\n    },\r\n  }),\r\n)\r\n\r\n//Component Props\r\ninterface MovieStateProps {\r\n  term: string\r\n  isFetching: boolean\r\n  result: Result\r\n  error?: string\r\n}\r\n\r\n//Form Props\r\ntype IFormInput = {\r\n  term: string\r\n}\r\n\r\nconst Movies: FC<MovieStateProps> = () => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  //Getting movie store states which are included\r\n  const { term, isFetching, result, error } = useSelector<RootState, MovieStateProps>(\r\n    state => state.movie,\r\n    shallowEqual,\r\n  )\r\n  //Using react-hook-form to make form handling better\r\n  const { register, handleSubmit, errors } = useForm<IFormInput>({ defaultValues: { term: 'pokemon' } })\r\n  const [page, setPage] = useState(1)\r\n\r\n  //Triggers action dispatcher when the page is mounted\r\n  useEffect(() => {\r\n    dispatch(fetchMovies('pokemon', page))\r\n  }, [dispatch])\r\n\r\n  //Form submission handler\r\n  const onSubmit = handleSubmit(({ term }) => {\r\n    setPage(1)\r\n    dispatch(fetchMovies(term, 1))\r\n  })\r\n\r\n  //Page change handler\r\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setPage(value)\r\n    dispatch(fetchMovies(term, value)) //could be used in useEffect hook\r\n  }\r\n\r\n  return (\r\n    <div className={classes.movieRoot}>\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12}>\r\n          <form onSubmit={onSubmit} autoComplete=\"off\">\r\n            <TextField\r\n              name=\"term\"\r\n              variant=\"outlined\"\r\n              placeholder=\"Enter a movie name...\"\r\n              fullWidth\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    {isFetching && <CircularProgress color=\"inherit\" size={32} />}\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              inputRef={register({ required: { value: true, message: 'Movie name is required' } })}\r\n              error={!!errors.term}\r\n              helperText={errors.term && errors.term.message}\r\n            />\r\n          </form>\r\n        </Grid>\r\n        {!error && result.Search.length > 0 ? (\r\n          <>\r\n            <Grid item xs={12}>\r\n              <Pagination\r\n                count={Math.round(parseInt(result.totalResults) / 10)}\r\n                page={page}\r\n                onChange={handleChange}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            {result.Search.map(movie => (\r\n              //Randomized keys are generated due to getting the exact same objects to avoid duplications\r\n              <Grid key={movie.imdbID + Math.random().toString(36).substring(7)} item xs={12} sm={6} md={4} lg={3}>\r\n                <MovieCard movie={movie} />\r\n              </Grid>\r\n            ))}\r\n          </>\r\n        ) : (\r\n          error && (\r\n            <Grid item xs={12}>\r\n              <Alert severity=\"error\">{error}</Alert>\r\n            </Grid>\r\n          )\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Movies\r\n"],"sourceRoot":""}