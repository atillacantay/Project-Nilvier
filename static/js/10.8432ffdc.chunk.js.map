{"version":3,"sources":["components/giphy/GiphyCardOperations.tsx","components/giphy/GiphyCard.tsx","components/indicators/FetchMoreIndicator.tsx","containers/Giphy.tsx","containers/GiphyContainer.tsx","store/giphy/actions.ts"],"names":["useStyles","makeStyles","createStyles","insideCard","height","display","flex","flexDirection","backgroundColor","header","alignItems","justifyContent","GiphyCardOperations","raised","gif","classes","useState","copied","setCopied","useEffect","setTimeout","Grow","in","timeout","className","Box","Tooltip","title","arrow","text","images","original","url","onCopy","IconButton","disableTouchRipple","disableFocusRipple","CheckCircle","style","fill","href","target","OpenInNew","mr","user","is_verified","VerifiedUser","Typography","color","variant","Link","profile_url","username","toLowerCase","ml","mb","root","backgroundRepeat","backgroundSize","backgroundPosition","GiphyCard","setRaised","handleRaise","Card","onMouseEnter","onMouseLeave","backgroundImage","FetchMoreIndicator","Grid","item","xs","m","CircularProgress","theme","giphyRoot","overflow","padding","spacing","margin","Giphy","giphyCall","fetchMoreGifs","term","isFetching","isFetchingMore","data","error","offset","setOffset","useForm","register","handleSubmit","errors","onSubmit","onScroll","event","currentTarget","scrollHeight","scrollTop","clientHeight","container","autoComplete","TextField","name","placeholder","defaultValue","fullWidth","InputProps","endAdornment","InputAdornment","position","size","inputRef","required","value","message","helperText","Divider","length","map","key","id","sm","md","lg","Alert","severity","mapDispatchToProps","page","dispatch","a","type","FETCH_GIFS_REQUEST","payload","Axios","get","process","response","FETCH_GIFS_SUCCESS","result","FETCH_GIFS_FAILURE","FETCH_MORE_GIFS_REQUEST","FETCH_MORE_GIFS_SUCCESS","FETCH_MORE_GIFS_FAILURE","connect","giphy","pagination"],"mappings":"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","file":"static/js/10.8432ffdc.chunk.js","sourcesContent":["import React, { FC, useState, useEffect } from 'react'\r\nimport { Gif } from '../../store/giphy/types'\r\n\r\nimport CopyToClipboard from 'react-copy-to-clipboard'\r\n\r\nimport { makeStyles, createStyles, Grow, Tooltip, IconButton, Typography, Box, Link } from '@material-ui/core'\r\nimport { Link as URL, CheckCircle, OpenInNew, VerifiedUser } from '@material-ui/icons'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    insideCard: {\r\n      height: '100%',\r\n      display: 'flex',\r\n      flex: 1,\r\n      flexDirection: 'column',\r\n      backgroundColor: 'rgb(0, 0, 0, 0.2)',\r\n    },\r\n    header: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n    },\r\n  }),\r\n)\r\n\r\ninterface Props {\r\n  raised: boolean\r\n  gif: Gif\r\n}\r\n\r\nconst GiphyCardOperations: FC<Props> = ({ raised, gif }) => {\r\n  const classes = useStyles()\r\n  const [copied, setCopied] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (copied) setTimeout(() => setCopied(false), 2000)\r\n  }, [copied])\r\n\r\n  return (\r\n    <Grow in={raised} timeout={500}>\r\n      <div className={classes.insideCard}>\r\n        <div className={classes.header}>\r\n          <Box>\r\n            <Tooltip title={copied ? 'Copied' : 'Copy url'} arrow>\r\n              <CopyToClipboard text={gif.images.original.url} onCopy={() => setCopied(true)}>\r\n                <IconButton disableTouchRipple disableFocusRipple>\r\n                  {copied ? <CheckCircle style={{ fill: 'greenyellow' }} /> : <URL style={{ fill: 'white' }} />}\r\n                </IconButton>\r\n              </CopyToClipboard>\r\n            </Tooltip>\r\n            <Tooltip title=\"Open in new tab\" arrow>\r\n              <IconButton href={gif.images.original.url} target=\"_blank\">\r\n                <OpenInNew style={{ fill: 'white' }} />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Box>\r\n          <Box mr={1} display=\"flex\" alignItems=\"center\">\r\n            {gif.user?.is_verified && <VerifiedUser style={{ fill: 'white' }} />}\r\n            <Typography style={{ color: 'white' }} variant=\"caption\">\r\n              <Link href={gif.user?.profile_url} target=\"_blank\" color=\"inherit\">\r\n                {gif.username.toLowerCase()}\r\n              </Link>\r\n            </Typography>\r\n          </Box>\r\n        </div>\r\n        <Box flex={1} />\r\n        <Box ml={1} mb={1}>\r\n          <Typography style={{ color: 'white' }} variant=\"body2\">\r\n            {gif.title.toLowerCase()}\r\n          </Typography>\r\n        </Box>\r\n      </div>\r\n    </Grow>\r\n  )\r\n}\r\n\r\nexport default GiphyCardOperations\r\n","import React, { useState } from 'react'\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\nimport { Card } from '@material-ui/core'\r\n\r\nimport { Gif } from '../../store/giphy/types'\r\nimport GiphyCardOperations from './GiphyCardOperations'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      height: '300px',\r\n      backgroundRepeat: 'no-repeat',\r\n      backgroundSize: 'cover',\r\n      backgroundPosition: 'center',\r\n    },\r\n  }),\r\n)\r\n\r\ntype Props = {\r\n  gif: Gif\r\n}\r\n\r\nconst GiphyCard: React.FC<Props> = ({ gif }) => {\r\n  const classes = useStyles()\r\n  const [raised, setRaised] = useState(false)\r\n\r\n  const handleRaise = () => {\r\n    setRaised(!raised)\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className={classes.root}\r\n      raised={raised}\r\n      onMouseEnter={handleRaise}\r\n      onMouseLeave={handleRaise}\r\n      title={gif.title}\r\n      style={{\r\n        backgroundImage: `url(${gif.images.original.url})`,\r\n      }}\r\n    >\r\n      <GiphyCardOperations raised={raised} gif={gif} />\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default GiphyCard\r\n","import React, { FC } from 'react'\r\n\r\nimport { Box, Grid, CircularProgress } from '@material-ui/core'\r\n\r\nconst FetchMoreIndicator: FC = () => {\r\n  return (\r\n    <Grid item xs={12}>\r\n      <Box m={1} display=\"flex\" justifyContent=\"center\">\r\n        <CircularProgress />\r\n      </Box>\r\n    </Grid>\r\n  )\r\n}\r\nexport default FetchMoreIndicator\r\n","import React, { FC, useState, useEffect } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Gif, Pagination } from '../store/giphy/types'\r\n\r\nimport GiphyCard from '../components/giphy/GiphyCard'\r\nimport FetchMoreIndicator from '../components/indicators/FetchMoreIndicator'\r\n\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport { Grid, TextField, Divider, CircularProgress, InputAdornment, Box } from '@material-ui/core'\r\nimport Alert from '@material-ui/lab/Alert'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    giphyRoot: {\r\n      height: '100%',\r\n      overflow: 'hidden auto',\r\n      padding: theme.spacing(2),\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(2, 0),\r\n    },\r\n  }),\r\n)\r\n\r\nexport interface GiphyStateProps {\r\n  data: Gif[]\r\n  pagination: Pagination\r\n  term: string\r\n  page?: number\r\n  isFetching: boolean\r\n  isFetchingMore: boolean\r\n  error?: string\r\n}\r\n\r\nexport interface GiphyDispatchProps {\r\n  giphyCall: (term: string, page?: number) => void\r\n  fetchMoreGifs: (term: string, offset: number) => void\r\n}\r\n\r\ninterface IFormInput {\r\n  term: string\r\n}\r\n\r\ntype Props = GiphyStateProps & GiphyDispatchProps\r\n\r\nconst Giphy: FC<Props> = ({ giphyCall, fetchMoreGifs, term, isFetching, isFetchingMore, data, error }) => {\r\n  const classes = useStyles()\r\n  const [offset, setOffset] = useState(0)\r\n  const { register, handleSubmit, errors } = useForm<IFormInput>()\r\n\r\n  const onSubmit = handleSubmit(({ term }) => {\r\n    giphyCall(term)\r\n  })\r\n\r\n  const handleScrolling = (event: React.SyntheticEvent<HTMLDivElement>) => {\r\n    if (event.currentTarget.scrollHeight - event.currentTarget.scrollTop === event.currentTarget.clientHeight) {\r\n      setOffset(offset + 25)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (offset) fetchMoreGifs(term, offset)\r\n  }, [offset, term, fetchMoreGifs])\r\n\r\n  return (\r\n    <div className={classes.giphyRoot} onScroll={handleScrolling}>\r\n      <Grid container>\r\n        <Grid item xs={12}>\r\n          <form onSubmit={onSubmit} autoComplete=\"off\">\r\n            <TextField\r\n              name=\"term\"\r\n              variant=\"outlined\"\r\n              placeholder=\"Enter a keyword to search gifs...\"\r\n              defaultValue={term}\r\n              fullWidth\r\n              className={classes.margin}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    {isFetching && <CircularProgress color=\"inherit\" size={32} />}\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              inputRef={register({ required: { value: true, message: 'Term is required' } })}\r\n              error={!!errors.term}\r\n              helperText={errors.term && errors.term.message}\r\n            />\r\n          </form>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Divider />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Grid container spacing={4}>\r\n            {!error && data.length > 0\r\n              ? data.map((gif: Gif) => (\r\n                  <Grid key={gif.id} item xs={12} sm={6} md={4} lg={3}>\r\n                    <GiphyCard gif={gif} />\r\n                  </Grid>\r\n                ))\r\n              : error && (\r\n                  <Grid item xs={12}>\r\n                    <Alert severity=\"error\" className={classes.margin}>\r\n                      {error}\r\n                    </Alert>\r\n                  </Grid>\r\n                )}\r\n            {isFetchingMore && <FetchMoreIndicator />}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Giphy\r\n","import { connect, MapStateToProps, MapDispatchToProps } from 'react-redux'\r\nimport { giphyCall, fetchMoreGifs } from '../store/giphy/actions'\r\nimport { RootState } from '../store'\r\nimport Giphy, { GiphyStateProps, GiphyDispatchProps } from './Giphy'\r\n\r\nconst mapStateToProps: MapStateToProps<GiphyStateProps, unknown, RootState> = ({ giphy }) => ({\r\n  term: giphy.term,\r\n  data: giphy.result.data,\r\n  pagination: giphy.result.pagination,\r\n  isFetching: giphy.isFetching,\r\n  isFetchingMore: giphy.isFetchingMore,\r\n  error: giphy.error,\r\n})\r\n\r\nconst mapDispatchToProps: MapDispatchToProps<GiphyDispatchProps, unknown> = {\r\n  giphyCall,\r\n  fetchMoreGifs,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Giphy)\r\n","// src/store/giphy/actions.ts\r\n\r\nimport { ActionCreator } from 'redux'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport {\r\n  FETCH_GIFS_REQUEST,\r\n  FETCH_GIFS_SUCCESS,\r\n  FETCH_GIFS_FAILURE,\r\n  GiphyActionTypes,\r\n  FETCH_MORE_GIFS_REQUEST,\r\n  FETCH_MORE_GIFS_SUCCESS,\r\n  FETCH_MORE_GIFS_FAILURE,\r\n} from './types'\r\nimport { RootState } from '..'\r\nimport Axios from 'axios'\r\n\r\nexport type AppThunk = ActionCreator<ThunkAction<void, RootState, null, GiphyActionTypes>>\r\n\r\nexport const giphyCall: AppThunk = (term: string, page = 0) => async dispatch => {\r\n  dispatch({ type: FETCH_GIFS_REQUEST, payload: {} })\r\n  try {\r\n    const response = await Axios.get(\r\n      `https://api.giphy.com/v1/gifs/search?q=${term}&api_key=${process.env.REACT_APP_GIPHY_API_KEY}`,\r\n    )\r\n    dispatch({ type: FETCH_GIFS_SUCCESS, payload: { result: response.data, term, page } })\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_GIFS_FAILURE, payload: {} })\r\n  }\r\n}\r\n\r\nexport const fetchMoreGifs: AppThunk = (term: string, offset: number) => async dispatch => {\r\n  dispatch({ type: FETCH_MORE_GIFS_REQUEST, payload: {} })\r\n  try {\r\n    const response = await Axios.get(\r\n      `https://api.giphy.com/v1/gifs/search?q=${term}&api_key=${process.env.REACT_APP_GIPHY_API_KEY}&offset=${offset}`,\r\n    )\r\n    dispatch({ type: FETCH_MORE_GIFS_SUCCESS, payload: response.data })\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_MORE_GIFS_FAILURE, payload: {} })\r\n  }\r\n}\r\n"],"sourceRoot":""}