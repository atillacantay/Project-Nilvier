{"version":3,"sources":["containers/VerificationPage.tsx"],"names":["VerificationPage","search","useLocation","history","useHistory","uuid","split","pop","useState","isVerified","setVerified","loading","setLoading","undefined","error","setError","useEffect","a","API","post","then","response","data","status","setTimeout","push","catch","console","log","message","verifyAccount","m","severity"],"mappings":"kOAwDeA,UA5CU,WAAO,IACtBC,EAAWC,cAAXD,OACFE,EAAUC,cACVC,EAAOJ,EAAOK,MAAM,QAAQC,MAHL,EAIKC,oBAAS,GAJd,mBAItBC,EAJsB,KAIVC,EAJU,OAKCF,oBAAS,GALV,mBAKtBG,EALsB,KAKbC,EALa,OAMHJ,wBAA6BK,GAN1B,mBAMtBC,EANsB,KAMfC,EANe,KA+B7B,OAvBAC,qBAAU,YACW,uCAAG,sBAAAC,EAAA,6DACpBL,GAAW,GADS,SAEdM,IAAIC,KAAJ,8BAAsDd,IACzDe,MAAK,SAAAC,GACAA,EAASC,KAAKC,SAChBb,GAAY,GACZE,GAAW,GACXY,YAAW,WACTrB,EAAQsB,KAAK,OACZ,SAGNC,OAAM,SAACZ,GAA6C,IAAD,EAClDa,QAAQC,IAAId,GACZF,GAAW,GACXG,EAAQ,UAACD,EAAMO,gBAAP,aAAC,EAAgBC,KAAKO,YAfd,2CAAH,qDAmBnBC,KACC,IAGD,kBAAC,IAAD,CAAKC,EAAG,GACLpB,EACC,kBAAC,IAAD,MACEF,EACF,kBAAC,IAAD,CAAOuB,SAAS,WAAhB,6EAEAlB,GAAS,kBAAC,IAAD,CAAOkB,SAAS,SAASlB","file":"static/js/11.069dece7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\nimport { API } from '../apis/api'\r\nimport { Alert } from '@material-ui/lab'\r\nimport { LinearProgress, Box } from '@material-ui/core'\r\nimport { AxiosError } from 'axios'\r\n\r\ninterface VerificationResponse {\r\n  status: boolean\r\n  message: string\r\n}\r\n\r\nconst VerificationPage = () => {\r\n  const { search } = useLocation()\r\n  const history = useHistory()\r\n  const uuid = search.split('?id=').pop()\r\n  const [isVerified, setVerified] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState<string | undefined>(undefined)\r\n\r\n  useEffect(() => {\r\n    const verifyAccount = async () => {\r\n      setLoading(true)\r\n      await API.post<VerificationResponse>(`/api/auth/verify?id=${uuid}`)\r\n        .then(response => {\r\n          if (response.data.status) {\r\n            setVerified(true)\r\n            setLoading(false)\r\n            setTimeout(() => {\r\n              history.push('/')\r\n            }, 3000)\r\n          }\r\n        })\r\n        .catch((error: AxiosError<VerificationResponse>) => {\r\n          console.log(error)\r\n          setLoading(false)\r\n          setError(error.response?.data.message)\r\n        })\r\n    }\r\n\r\n    verifyAccount()\r\n  }, [])\r\n\r\n  return (\r\n    <Box m={2}>\r\n      {loading ? (\r\n        <LinearProgress />\r\n      ) : isVerified ? (\r\n        <Alert severity=\"success\">Your Account is Verified, You will be redirected to homepage in 3 seconds</Alert>\r\n      ) : (\r\n        error && <Alert severity=\"error\">{error}</Alert>\r\n      )}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default VerificationPage\r\n"],"sourceRoot":""}